Project Idea: Online Shopping System (Basic E-Commerce)

Aim:

The aim of this internship is to provide students with hands-on experience in database 

management and backend development by designing and implementing an Online 

Shopping System using MySQL. This project will help students understand how to manage 

product data, process orders, and handle stock efficiently.

Objectives:

1. Understanding Database Management:

• Learn the fundamentals of relational databases and SQL.

2. Product Management:

• Create a database to store product details such as name, price, and stock quantity.

3. Customer & Order Processing:

• Implement tables for customer registration and order management.

• Perform CRUD (Create, Read, Update, Delete) operations on orders.

4. Stock Management:

• Implement automatic stock updates when an order is placed.

• Prevent orders if the stock is insufficient.

5. Order Tracking & Reports:

• Generate reports on sales and stock availability.
Expected Output:

At the end of this internship, students will develop a fully functional MySQL-based Online 

Shopping System with:

✔ A structured database containing tables for products, customers, orders, and order details.

✔ The ability to add, update, and remove products dynamically.

✔ A system where customers can place orders, update stock automatically, and prevent 

out-of-stock purchases.

✔ The database efficiently handles order processing using stored procedures and triggers.

✔ SQL queries optimize data retrieval for faster performance and better scalability.

Sample Output:

➢ Product Table (Before Order Placement)

Product_ID Product_Name Price Stock_Quantity

1 Laptop 50000 10

2 Smartphone 25000 5

3 Headphones 2000 15

➢ Customer Table

Customer_ID Name Email Contact

101 John Doe john@example.com 9876543210

102 Jane Smith jane@example.com 9123456789

➢ Order Table (After John Doe places an order for a Laptop and Headphones)

Order_ID Customer_ID Order_Date Total_Amount

1001 101 2025-03-15 52000

➢ Order Details Table

OrderDetail_ID Order_ID Product_ID Quantity Subtotal

5001 1001 1 1 50000

5002 1001 3 1 2000

6. Stored Procedures & Optimization:

• Use stored procedures, triggers, and indexing for efficient database performance.
